{"version":3,"file":"index.js","sources":["../src/plugin.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/consistent-type-imports */\n\nimport { escapeHtml } from \"@mdit/helper\";\nimport { tex } from \"@mdit/plugin-tex\";\nimport type { KatexOptions, KatexOptions as OriginalKatexOptions } from \"katex\";\nimport type MarkdownIt from \"markdown-it\";\n\nimport type { MarkdownItKatexOptions, TeXTransformer } from \"./options.js\";\n\nlet isKatexInstalled = true;\nlet katexLib: typeof import(\"katex\");\n\ntry {\n  katexLib = (await import(\"katex\"))\n    .default as unknown as typeof import(\"katex\");\n} catch {\n  /* istanbul ignore next -- @preserve */\n  isKatexInstalled = false;\n}\n\nconst katexInline = (\n  tex: string,\n  options: OriginalKatexOptions,\n  transformer?: TeXTransformer,\n): string => {\n  let result: string;\n\n  try {\n    result = katexLib.renderToString(tex, {\n      ...options,\n      displayMode: false,\n    });\n  } catch (error) {\n    /* istanbul ignore else -- @preserve */\n    if (error instanceof katexLib.ParseError) {\n      console.warn(error);\n      result = `<span class='katex-error' title='${escapeHtml(\n        (error as Error).toString(),\n      )}'>${escapeHtml(tex)}</span>`;\n    } else {\n      throw error;\n    }\n  }\n\n  return transformer?.(result, false) ?? result;\n};\n\nconst katexBlock = (\n  tex: string,\n  options: OriginalKatexOptions,\n  transformer?: TeXTransformer,\n): string => {\n  let result: string;\n\n  try {\n    result = `<p class='katex-block'>${katexLib.renderToString(tex, {\n      ...options,\n      displayMode: true,\n    })}</p>\\n`;\n  } catch (error) {\n    /* istanbul ignore else -- @preserve */\n    if (error instanceof katexLib.ParseError) {\n      console.warn(error);\n      result = `<p class='katex-block katex-error' title='${escapeHtml(\n        (error as Error).toString(),\n      )}'>${escapeHtml(tex)}</p>\\n`;\n    } else {\n      throw error;\n    }\n  }\n\n  return transformer?.(result, true) ?? result;\n};\n\nexport const loadMhchem = async (): Promise<void> => {\n  await import(\"katex/contrib/mhchem\");\n};\n\nexport const katex = <MarkdownItEnv = unknown>(\n  md: MarkdownIt,\n  options: MarkdownItKatexOptions<MarkdownItEnv> = {},\n): void => {\n  /* istanbul ignore if -- @preserve */\n  if (!isKatexInstalled) {\n    console.error('[@mdit/plugin-katex]: \"katex\" not installed!');\n\n    return;\n  }\n\n  const {\n    allowInlineWithSpace = false,\n    mathFence = false,\n    logger = (\n      errorCode: string,\n    ): \"ignore\" | \"warn\" | \"error\" | boolean | undefined =>\n      errorCode === \"newLineInDisplayMode\" ? \"ignore\" : \"warn\",\n    // see https://github.com/vuepress/ecosystem/issues/261\n    // this ensures that `\\gdef` works as expected\n    macros = {},\n    transformer,\n    ...userOptions\n  } = options;\n\n  md.use(tex, {\n    allowInlineWithSpace,\n    mathFence,\n    render: (content: string, displayMode: boolean, env: MarkdownItEnv) => {\n      const katexOptions: KatexOptions = {\n        strict: (errorCode, errorMsg, token) =>\n          logger(errorCode, errorMsg, token, env) ?? \"ignore\",\n        macros,\n        throwOnError: false,\n        ...userOptions,\n      };\n\n      return displayMode\n        ? katexBlock(content, katexOptions, transformer)\n        : katexInline(content, katexOptions, transformer);\n    },\n  });\n};\n"],"names":["isKatexInstalled","katexLib","katexInline","tex","options","transformer","result","error","escapeHtml","katexBlock","loadMhchem","katex","md","allowInlineWithSpace","mathFence","logger","errorCode","macros","userOptions","content","displayMode","env","katexOptions","errorMsg","token"],"mappings":"iFASA,IAAIA,EAAmB,GACnBC,EAEJ,GAAI,CACFA,GAAY,KAAa,QAAA,OAAO,GAC7B,OACL,MAAQ,CAEND,uCAAAA,EAAmB,EACrB,CAEA,MAAME,EAAc,CAClBC,EACAC,EACAC,IACW,CACX,IAAIC,EAEJ,GAAI,CACFA,EAASL,EAAS,eAAeE,EAAK,CACpC,GAAGC,EACH,YAAa,EACf,CAAC,CACH,OAASG,EAAO,wCAEd,GAAIA,aAAiBN,EAAS,WAC5B,QAAQ,KAAKM,CAAK,EAClBD,EAAS,oCAAoCE,EAC1CD,EAAgB,SACnB,CAAA,CAAC,KAAKC,EAAWL,CAAG,CAAC,cAEfI,OAAAA,CAEV,CAEA,OAAOF,IAAcC,EAAQ,EAAK,GAAKA,CACzC,EAEMG,EAAa,CACjBN,EACAC,EACAC,IACW,CACX,IAAIC,EAEJ,GAAI,CACFA,EAAS,0BAA0BL,EAAS,eAAeE,EAAK,CAC9D,GAAGC,EACH,YAAa,EACf,CAAC,CAAC;AAAA,CACJ,OAASG,EAAO,CAAA,uCAEd,GAAIA,aAAiBN,EAAS,WAC5B,QAAQ,KAAKM,CAAK,EAClBD,EAAS,6CAA6CE,EACnDD,EAAgB,SACnB,CAAA,CAAC,KAAKC,EAAWL,CAAG,CAAC;AAAA,MAErB,OAAMI,CAEV,CAEA,OAAOF,IAAcC,EAAQ,EAAI,GAAKA,CACxC,EAEaI,EAAa,SAA2B,CACnD,KAAa,QAAA,sBAAsB,CACrC,EAEaC,EAAQ,CACnBC,EACAR,EAAiD,CAAA,IACxC,CAET,qCAAA,GAAI,CAACJ,EAAkB,CACrB,QAAQ,MAAM,8CAA8C,EAE5D,MACF,CAEA,KAAM,CACJ,qBAAAa,EAAuB,GACvB,UAAAC,EAAY,GACZ,OAAAC,EACEC,GAEAA,IAAc,uBAAyB,SAAW,OAGpD,OAAAC,EAAS,CAAA,EACT,YAAAZ,EACA,GAAGa,CACL,EAAId,EAEJQ,EAAG,IAAIT,EAAK,CACV,qBAAAU,EACA,UAAAC,EACA,OAAQ,CAACK,EAAiBC,EAAsBC,IAAuB,CACrE,MAAMC,EAA6B,CACjC,OAAQ,CAACN,EAAWO,EAAUC,IAC5BT,EAAOC,EAAWO,EAAUC,EAAOH,CAAG,GAAK,SAC7C,OAAAJ,EACA,aAAc,GACd,GAAGC,CACL,EAEA,OAAOE,EACHX,EAAWU,EAASG,EAAcjB,CAAW,EAC7CH,EAAYiB,EAASG,EAAcjB,CAAW,CACpD,CACF,CAAC,CACH"}
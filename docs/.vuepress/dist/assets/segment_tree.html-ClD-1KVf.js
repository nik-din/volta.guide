import{_ as s,e as a,j as p,o as t}from"./app-Da_MjU0J.js";const e={};function o(c,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="segment-tree" tabindex="-1"><a class="header-anchor" href="#segment-tree"><span>Segment tree</span></a></h1><p>La struttura dati pi√π utile e versatile in cp.</p><h2 id="risorse-esterne" tabindex="-1"><a class="header-anchor" href="#risorse-esterne"><span>Risorse esterne</span></a></h2><ul><li><a href="https://wiki.olinfo.it/lezioni/segment-tree-1" target="_blank" rel="noopener noreferrer">segment tree, guida di Arcari</a></li><li><a href="https://wiki.olinfo.it/it/lezioni/segment-tree-2" target="_blank" rel="noopener noreferrer">segment tree con lazy, sempre di Arcari</a></li><li><a href="https://cp-algorithms.com/data_structures/segment_tree.html" target="_blank" rel="noopener noreferrer">cp-algorithms</a></li></ul><h2 id="implementazione" tabindex="-1"><a class="header-anchor" href="#implementazione"><span>Implementazione</span></a></h2><p>Segment iterativo, preso da <a href="https://codeforces.com/blog/entry/18051" target="_blank" rel="noopener noreferrer">questo blog su cf</a>:</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token comment">// segment ierativo</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span></span>
<span class="line"><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">segtree</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">int</span> n<span class="token punctuation">;</span></span>
<span class="line">  vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> t<span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">segtree</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>v<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">n</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    t<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">copy</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> t<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">[</span>i <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> t<span class="token punctuation">[</span>i <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">upd</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">for</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span>i <span class="token operator">+=</span> n<span class="token punctuation">]</span> <span class="token operator">+=</span> x<span class="token punctuation">;</span> i <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> t<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">[</span>i <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> t<span class="token punctuation">[</span>i <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span><span class="token punctuation">(</span>l <span class="token operator">+=</span> n<span class="token punctuation">,</span> r<span class="token operator">+=</span> n<span class="token punctuation">;</span> l<span class="token operator">&lt;=</span>r<span class="token punctuation">;</span> l <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> sum <span class="token operator">+=</span> t<span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>r <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> sum <span class="token operator">+=</span> t<span class="token punctuation">[</span>r<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> sum<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Segment ricorsivo (con lazy propagation):</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token comment">//segment tree ricorsivo con lazy propagation</span></span>
<span class="line"><span class="token comment">//in questo caso l&#39;operazione √® la somma, l&#39;update √® add</span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span></span>
<span class="line"><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> t<span class="token punctuation">;</span> <span class="token comment">//resize(4n)</span></span>
<span class="line">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> lazy<span class="token punctuation">;</span> <span class="token comment">//resize(4n)</span></span>
<span class="line"><span class="token keyword">int</span> n<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> nl<span class="token punctuation">,</span> <span class="token keyword">int</span> nr<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>lazy<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    t<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">+=</span> lazy<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>nr<span class="token operator">-</span>nl<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span><span class="token punctuation">(</span>nl<span class="token operator">!=</span>nr<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        lazy<span class="token punctuation">[</span>v<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+=</span>lazy<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        lazy<span class="token punctuation">[</span>v<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+=</span>lazy<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    lazy<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> nl<span class="token punctuation">,</span> <span class="token keyword">int</span> nr<span class="token punctuation">,</span> <span class="token keyword">int</span> ql<span class="token punctuation">,</span> <span class="token keyword">int</span> qr<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> nl<span class="token punctuation">,</span> nr<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span><span class="token punctuation">(</span>ql<span class="token operator">&lt;=</span>nl <span class="token operator">&amp;&amp;</span> nr<span class="token operator">&lt;=</span>qr<span class="token punctuation">)</span> <span class="token keyword">return</span> t<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span><span class="token punctuation">(</span>nl <span class="token operator">&gt;</span> qr <span class="token operator">||</span> nr <span class="token operator">&lt;</span> ql<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>nl<span class="token operator">+</span>nr<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">sum</span><span class="token punctuation">(</span>v<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> nl<span class="token punctuation">,</span> m<span class="token punctuation">,</span> ql<span class="token punctuation">,</span> qr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">sum</span><span class="token punctuation">(</span>v<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> nr<span class="token punctuation">,</span> ql<span class="token punctuation">,</span> qr<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">lazy_add</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> nl<span class="token punctuation">,</span> <span class="token keyword">int</span> nr<span class="token punctuation">,</span> <span class="token keyword">int</span> ql<span class="token punctuation">,</span> <span class="token keyword">int</span> qr<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> nl<span class="token punctuation">,</span> nr<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span><span class="token punctuation">(</span>ql<span class="token operator">&lt;=</span>nl <span class="token operator">&amp;&amp;</span> nr<span class="token operator">&lt;=</span>qr<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        lazy<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">+=</span>k<span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span><span class="token punctuation">(</span>nl<span class="token operator">&gt;</span>qr <span class="token operator">||</span> nr <span class="token operator">&lt;</span>ql<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>nl<span class="token operator">+</span>nr<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">lazy_add</span><span class="token punctuation">(</span>v<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> nl<span class="token punctuation">,</span> m<span class="token punctuation">,</span> ql<span class="token punctuation">,</span> qr<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">    <span class="token function">lazy_add</span><span class="token punctuation">(</span>v<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> nl<span class="token punctuation">,</span> nr<span class="token punctuation">,</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> qr<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> nl<span class="token punctuation">,</span> <span class="token keyword">int</span> nr<span class="token punctuation">,</span> <span class="token keyword">int</span> idx<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> nl<span class="token punctuation">,</span> nr<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span><span class="token punctuation">(</span>nl<span class="token operator">==</span>nr<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        t<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">+=</span>k<span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>nl<span class="token operator">+</span>nr<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span><span class="token punctuation">(</span>idx<span class="token operator">&lt;=</span>m<span class="token punctuation">)</span> <span class="token function">add</span><span class="token punctuation">(</span>v<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> nl<span class="token punctuation">,</span> m<span class="token punctuation">,</span> idx<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">    <span class="token keyword">else</span> <span class="token function">add</span><span class="token punctuation">(</span>v<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> nr<span class="token punctuation">,</span> idx<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    t<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span>t<span class="token punctuation">[</span>v<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span>t<span class="token punctuation">[</span>v<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9)]))}const i=s(e,[["render",o],["__file","segment_tree.html.vue"]]),u=JSON.parse('{"path":"/materiale/segment_tree.html","title":"Segment tree","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Risorse esterne","slug":"risorse-esterne","link":"#risorse-esterne","children":[]},{"level":2,"title":"Implementazione","slug":"implementazione","link":"#implementazione","children":[]}],"git":{"updatedTime":1749483537000,"contributors":[{"name":"nik-din","username":"nik-din","email":"nik.dindo@gmail.com","commits":1,"url":"https://github.com/nik-din"}]},"filePathRelative":"materiale/segment_tree.md"}');export{i as comp,u as data};

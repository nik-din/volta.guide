import{_ as s,e as a,j as p,o as e}from"./app-Da_MjU0J.js";const t={};function o(l,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h1 id="johnnie-walker" tabindex="-1"><a class="header-anchor" href="#johnnie-walker"><span>Johnnie Walker</span></a></h1><p>Link: <a href="https://training.olinfo.it/task/ois_walker" target="_blank" rel="noopener noreferrer">https://training.olinfo.it/task/ois_walker</a> Fonte: OIS 2021 round 3</p><details><summary>Categoria</summary><p>math</p></details><p>Problema di conteggi decente</p><details><summary>Hint 1:</summary><p>Calcola la quantità ricorsivamente</p></details><details><summary>Hint 2:</summary><p>In particolare ricorsivamente su K, e poi trova la formula chiusa. Attento agli inversi.</p></details><br><details><summary>Sketch di soluzione:</summary><p>Calcoliamo la soluzione ricorsivamente. In particolare f_i è la soluzione per k = i.<br> Allora f_1 = 0, f_2 = n-1. f_3 sarà uguale a (n-1)^2 meno f_2, perché se arrivo a 1 appena prima della fine non posso rimanere nello stesso posto.<br> Generalizzando f_i = (n-1)^(i-1)-f_{i-1}. Espandendo viene f_i = (n-1)^(i-1) - (n-1)^(i-2) + ... +- (n-1); l&#39;ultimo segno dipende dalla parità di i. Facendo due casi dievrsi in base alla parità ed usando l&#39;espansione di a^k+1 conclude.</p></details><br><details><summary>Soluzione:</summary><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span></span>
<span class="line"><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">long</span> <span class="token keyword">long</span> MOD <span class="token operator">=</span> <span class="token number">666013</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// input data</span></span>
<span class="line"><span class="token keyword">long</span> <span class="token keyword">long</span> n<span class="token punctuation">,</span> k<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">ll <span class="token function">fastexp</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span> ll b<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">  ll c<span class="token operator">=</span> <span class="token function">fastexp</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c<span class="token operator">*</span>c<span class="token punctuation">)</span><span class="token operator">%</span>MOD<span class="token punctuation">)</span><span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token operator">%</span>MOD<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span>c<span class="token operator">*</span>c<span class="token punctuation">)</span><span class="token operator">%</span>MOD<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">assert</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%lld %lld&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// insert your code here</span></span>
<span class="line">  <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">fastexp</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">fastexp</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> MOD<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span>MOD<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">+</span> MOD<span class="token punctuation">)</span> <span class="token operator">%</span>MOD <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">fastexp</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">fastexp</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> MOD<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span>MOD<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span>MOD<span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,10)]))}const i=s(t,[["render",o],["__file","walker.html.vue"]]),r=JSON.parse('{"path":"/problemi/walker.html","title":"Johnnie Walker","lang":"en-US","frontmatter":{},"headers":[],"git":{"updatedTime":1729355684000,"contributors":[{"name":"nik-din","username":"nik-din","email":"nik.dindo@gmail.com","commits":1,"url":"https://github.com/nik-din"}]},"filePathRelative":"problemi/walker.md"}');export{i as comp,r as data};

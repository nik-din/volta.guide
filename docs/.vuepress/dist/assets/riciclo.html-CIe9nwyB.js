import{_ as s,e as a,j as p,o as t}from"./app-CqBSLVw3.js";const e={};function o(c,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="riciclo" tabindex="-1"><a class="header-anchor" href="#riciclo"><span>Riciclo</span></a></h1><p>Link: <a href="https://training.olinfo.it/#/task/oii_riciclo/statement" target="_blank" rel="noopener noreferrer">https://training.olinfo.it/#/task/oii_riciclo/statement</a> Fonte: OII 2021</p><details><summary>Categoria</summary><p>greedy, math</p></details><details><summary>Hint 1:</summary><p>Una strategia greedy funziona.<br> Conviene sempre prendere una palette più piccola. Ma come li distribuisco sui camion?<br> Spoiler: anche in questo caso greedy.</p></details><details><summary>Hint 2:</summary><p>Dividi i T[i] in potenze di 2.</p></details><br><details><summary>Sketch di soluzione:</summary><p>Dividi i T[i] in potenze di 2. A quel punto cicla su P[i] e semplicemente proviamo a mettere i P[i] nelle potenze di 2 dei T[i].<br> La scomposizione dei T[i] funziona perché, banalmente, tutti i P[i] sono potenze di due. (Convincetevi che funziona insomma)</p></details><br><details><summary>Soluzione:</summary><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span></span>
<span class="line"><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">riciclo</span><span class="token punctuation">(</span><span class="token keyword">int</span> N<span class="token punctuation">,</span> <span class="token keyword">int</span> M<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> T<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> P<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  vector<span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">&gt;</span> <span class="token function">V</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">;</span> j<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        T<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>T<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        V<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>V<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">long</span> <span class="token keyword">long</span> S<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>M<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">long</span> <span class="token keyword">long</span> e<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">31</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span><span class="token punctuation">(</span>V<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&gt;=</span>P<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        V<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>V<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span>P<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>e<span class="token punctuation">;</span></span>
<span class="line">        S<span class="token operator">=</span>S<span class="token operator">+</span>P<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        P<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token keyword">else</span><span class="token punctuation">{</span></span>
<span class="line">        S<span class="token operator">=</span>S<span class="token operator">+</span>V<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">/</span>e<span class="token punctuation">;</span></span>
<span class="line">        P<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>P<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>V<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">/</span>e<span class="token punctuation">;</span></span>
<span class="line">        V<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>V<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">%</span>e<span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> S<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,9)]))}const i=s(e,[["render",o],["__file","riciclo.html.vue"]]),u=JSON.parse('{"path":"/problemi/riciclo.html","title":"Riciclo","lang":"en-US","frontmatter":{},"headers":[],"git":{"updatedTime":1729345141000,"contributors":[{"name":"nik-din","username":"nik-din","email":"nik.dindo@gmail.com","commits":4,"url":"https://github.com/nik-din"}]},"filePathRelative":"problemi/riciclo.md"}');export{i as comp,u as data};

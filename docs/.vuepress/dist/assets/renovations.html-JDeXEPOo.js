import{_ as s,e as a,j as p,o as t}from"./app-DEbVUHJ0.js";const o={};function e(c,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="city-redevelopment" tabindex="-1"><a class="header-anchor" href="#city-redevelopment"><span>City redevelopment</span></a></h1><p>Link: <a href="https://training.olinfo.it/task/ois_renovations" target="_blank" rel="noopener noreferrer">https://training.olinfo.it/task/ois_renovations</a><br> Fonte: OIS 2022 Round 1</p><details><summary>Categoria</summary><p>math, ds</p></details><p>Non particolarmente illuminante</p><details><summary>Hint 1:</summary><p>Ignora K e trova una formula per calcolare le query</p></details><details><summary>Hint 3:</summary><p>Come tratto gli elementi &lt; K?</p></details><details><summary>Hint 2:</summary><p>Usa un segment, precacola il fattoriale e usa gli inversi per calcolare la formula in logN</p></details><br><details><summary>Sketch di soluzione:</summary><p>Innanizittutto per ogni i V[i] = max(V[i], K), perch√© ogni volta che faccio una query sono costretto ad aumentarlo fino a K.<br> Poi costruisco un segment tree con somma sull&#39;intervallo.<br> Per rispondere alle query basta fare stars and bars, in particolare con s - somma(l, r) caramelle e r-l+1 bambini.<br> Precalcolo il fattoriale e uso gli inversi per concludere.</p></details><br><details><summary>Soluzione:</summary><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span></span>
<span class="line"><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">segtree</span><span class="token punctuation">{</span></span>
<span class="line">  T n<span class="token punctuation">;</span></span>
<span class="line">  vector<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> t<span class="token punctuation">;</span></span>
<span class="line">  function<span class="token operator">&lt;</span><span class="token function">T</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span> T<span class="token punctuation">)</span><span class="token operator">&gt;</span> f<span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">segtree</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> v<span class="token punctuation">,</span> function<span class="token operator">&lt;</span><span class="token function">T</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span> T<span class="token punctuation">)</span><span class="token operator">&gt;</span> f<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">f</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">&lt;</span>v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> n <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">    t<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> t<span class="token punctuation">[</span>i<span class="token operator">+</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> t<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">void</span> <span class="token function">upd</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> T k<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    x <span class="token operator">+=</span> n<span class="token punctuation">;</span></span>
<span class="line">    t<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span><span class="token punctuation">(</span>x<span class="token operator">/=</span><span class="token number">2</span><span class="token punctuation">;</span> x<span class="token operator">&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span> x<span class="token operator">/=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">      t<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span>x<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">[</span>x<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  T <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    l <span class="token operator">+=</span>n<span class="token punctuation">;</span> r <span class="token operator">+=</span>n<span class="token punctuation">;</span></span>
<span class="line">    T s<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span> l<span class="token operator">&lt;=</span>r<span class="token punctuation">;</span> l<span class="token operator">/=</span><span class="token number">2</span><span class="token punctuation">,</span> r<span class="token operator">/=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">)</span> s <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>r<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> s <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> t<span class="token punctuation">[</span>r<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> s<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> ll md <span class="token operator">=</span> <span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span></span>
<span class="line">vector<span class="token operator">&lt;</span>ll<span class="token operator">&gt;</span> fact<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">ll <span class="token function">fastexp</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span> ll b<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">  ll c <span class="token operator">=</span> <span class="token function">fastexp</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c<span class="token operator">*</span>c<span class="token punctuation">)</span><span class="token operator">%</span>md<span class="token punctuation">)</span><span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token operator">%</span>md<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span>c<span class="token operator">*</span>c<span class="token punctuation">)</span><span class="token operator">%</span>md<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">ll <span class="token function">binomiale</span><span class="token punctuation">(</span>ll n<span class="token punctuation">,</span> ll k<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  ll ans <span class="token operator">=</span> fact<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  ans <span class="token operator">*=</span> <span class="token function">fastexp</span><span class="token punctuation">(</span>fact<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> md<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  ans <span class="token operator">%=</span> md<span class="token punctuation">;</span></span>
<span class="line">  ans <span class="token operator">*=</span> <span class="token function">fastexp</span><span class="token punctuation">(</span>fact<span class="token punctuation">[</span>n<span class="token operator">-</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> md<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  ans <span class="token operator">%=</span> md<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> ans<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  ll n<span class="token punctuation">,</span> q<span class="token punctuation">,</span> k<span class="token punctuation">;</span> cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> q <span class="token operator">&gt;&gt;</span> k<span class="token punctuation">;</span></span>
<span class="line">  vector<span class="token operator">&lt;</span>ll<span class="token operator">&gt;</span> <span class="token function">vec</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    cin <span class="token operator">&gt;&gt;</span> vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  segtree t <span class="token operator">=</span> <span class="token generic-function"><span class="token function">segtree</span><span class="token generic class-name"><span class="token operator">&lt;</span>ll<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>vec<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  fact<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">3e6</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  fact<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">3e6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> fact<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>fact<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token operator">%</span>md<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> type<span class="token punctuation">;</span> cin <span class="token operator">&gt;&gt;</span> type<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span><span class="token punctuation">(</span>type<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">      ll a<span class="token punctuation">,</span> b<span class="token punctuation">;</span> cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">;</span></span>
<span class="line">      a<span class="token operator">--</span><span class="token punctuation">;</span></span>
<span class="line">      t<span class="token punctuation">.</span><span class="token function">upd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">else</span><span class="token punctuation">{</span></span>
<span class="line">      ll l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> s<span class="token punctuation">;</span> cin <span class="token operator">&gt;&gt;</span> l <span class="token operator">&gt;&gt;</span> r <span class="token operator">&gt;&gt;</span> s<span class="token punctuation">;</span></span>
<span class="line">      l<span class="token operator">--</span><span class="token punctuation">;</span> r<span class="token operator">--</span><span class="token punctuation">;</span></span>
<span class="line">      ll sum <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">if</span><span class="token punctuation">(</span>sum <span class="token operator">&gt;</span> s<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;0\\n&quot;</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">else</span><span class="token punctuation">{</span></span>
<span class="line">          cout <span class="token operator">&lt;&lt;</span> <span class="token function">binomiale</span><span class="token punctuation">(</span>s<span class="token operator">-</span>sum <span class="token operator">+</span> r<span class="token operator">-</span>l<span class="token punctuation">,</span> r<span class="token operator">-</span>l<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,11)]))}const i=s(o,[["render",e],["__file","renovations.html.vue"]]),u=JSON.parse('{"path":"/problemi/renovations.html","title":"City redevelopment","lang":"en-US","frontmatter":{},"headers":[],"git":{"updatedTime":1729369798000,"contributors":[{"name":"nik-din","username":"nik-din","email":"nik.dindo@gmail.com","commits":1,"url":"https://github.com/nik-din"}]},"filePathRelative":"problemi/renovations.md"}');export{i as comp,u as data};

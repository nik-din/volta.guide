import { ssrRenderAttrs, ssrRenderStyle } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "../app.CFd3vad-.mjs";
import "@vuepress/shared";
import "vue-router";
import "@vueuse/core";
import "@vue/devtools-api";
const _sfc_main = {};
function _sfc_ssrRender(_ctx, _push, _parent, _attrs) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="grafi" tabindex="-1"><a class="header-anchor" href="#grafi"><span>Grafi</span></a></h1><p>Un grafo è una struttura caratterizzata da nodi, o vertici, e archi. Di seguito useremo <code>N</code> per indicare il numero di nodi e <code>M</code> per il numero di archi.</p><h2 id="come-memorizzare-un-grafo" tabindex="-1"><a class="header-anchor" href="#come-memorizzare-un-grafo"><span>Come memorizzare un grafo?</span></a></h2><p>Quando durante le risoluzione di un problema dobbiamo ricevere in input un grafo possiamo, a seconda della situazione, decidere di utilizzare uno dei tre modi principali per memorizzarlo.</p><p>Il metodo più utilizzato è la lista di adiacenza, ma talvolta ne possono essere richiesti anche altri meno diffusi.</p><h3 id="lista-di-archi" tabindex="-1"><a class="header-anchor" href="#lista-di-archi"><span>Lista di archi</span></a></h3><p>Il primo metodo che affronteremo è la lista di archi. La lista di archi è un vettore di M elementi in cui ogni elemento rappresenta un arco ed è quindi costituito dal nodo di partenza, dal nodo di arrivo e, in caso di grafi pesati, anche il peso dell&#39;arco.</p><p>L&#39;implementazione in C++ è:</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">vector<span class="token operator">&lt;</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">&gt;&gt;</span> <span class="token function">edges</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="${ssrRenderStyle({ "counter-reset": "line-number 0" })}"><div class="line-number"></div></div></div><p>La complessità di:</p><ul><li>Sapere se un arco esiste è <code>O(M)</code></li><li>Iterare sugli archi di un nodo è <code>O(M)</code></li><li>Iterare su tutti gli archi è <code>O(M)</code></li><li>Aggiungere un arco è <code>O(1)</code></li><li>Rimuovere un arco è <code>O(M)</code></li></ul><p>La memoria usata è <code>O(M)</code>.</p><h3 id="matrice-di-adiacenza" tabindex="-1"><a class="header-anchor" href="#matrice-di-adiacenza"><span>Matrice di adiacenza</span></a></h3><p>La matrice di adiacenza è una matrice, o un vettore bidimensionale, di bool di dimensione N. In questo caso <code>adj[i][j]</code> sarà <code>true</code> se esiste l&#39;arco i-&gt;j, <code>false</code> altrimenti.</p><p>L&#39;implementazione in C++ è:</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">&gt;&gt;</span> <span class="token function">adj</span><span class="token punctuation">(</span>N<span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">&gt;</span></span></span> <span class="token punctuation">(</span>N<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="${ssrRenderStyle({ "counter-reset": "line-number 0" })}"><div class="line-number"></div></div></div><p>La complessità di:</p><ul><li>Sapere se un arco esiste è <code>O(1)</code></li><li>Iterare sugli archi di un nodo è <code>O(N)</code></li><li>Iterare su tutti gli archi è <code>O(N^2)</code></li><li>Aggiungere un arco è <code>O(1)</code></li><li>Rimuovere un arco è <code>O(1)</code></li></ul><p>La memoria usata è <code>O(N^2)</code>.</p><h3 id="lista-di-adiacenza" tabindex="-1"><a class="header-anchor" href="#lista-di-adiacenza"><span>Lista di adiacenza</span></a></h3><p>La lista di adiacenza è un vettore bidimensionale di dimensione N. Ogni elemento <code>adj[i]</code> è quindi a sua volta un vettore che contiene tutti i nodi collegati con un arco al nodo i.</p><p>L&#39;implementazione in C++ è:</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> <span class="token function">adj</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="${ssrRenderStyle({ "counter-reset": "line-number 0" })}"><div class="line-number"></div></div></div><p>Sia <code>m</code> il numero di archi uscenti da un nodo, la complessità di:</p><ul><li>Sapere se un arco esiste è <code>O(m)</code></li><li>Iterare sugli archi di un nodo è <code>O(m)</code></li><li>Iterare su tutti gli archi è <code>O(N+M)</code></li><li>Aggiungere un arco è <code>O(1)</code></li><li>Rimuovere un arco è <code>O(m)</code></li></ul><p>La memoria usata è <code>O(N+M)</code>.</p><h2 id="algoritmi" tabindex="-1"><a class="header-anchor" href="#algoritmi"><span>Algoritmi</span></a></h2><p>La BFS e la DFS sono algoritmi che, da soli, non permettono di ricavare molte informazioni o di risolvere molti problemi. Sono infatti dei modi di visitare un grafo, che di solito vanno modificati per poter rispondere alla richiesta del problema.</p><h3 id="dfs" tabindex="-1"><a class="header-anchor" href="#dfs"><span>DFS</span></a></h3><p>La DFS, o depth-first search, è un algoritmo che permette di visitare il grado &quot;in profondità&quot;. Infatti è un algoritmo ricorsivo che parte da un nodo <code>v</code> e si sposta al primo nodo <code>u</code> che non è ancora stato visitato. Quando il nodo corrente non è collegato a nessun nodo non ancora visitato ritorna al &quot;padre&quot;, che si sposterà al figlio successivo (se esiste).</p><p>La complessita è <code>O(N+M)</code>. Infatti ogni nodo verrà visitato dall&#39;algoritmo esattamente una volta, e anche ogni arco verrà percorso una sola volta.</p><p>L&#39;implementazione in C++ che usa la lista di adiacenza è:</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token comment">//variabili globali da inizializzare:</span></span>
<span class="line">vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">&gt;</span> visited<span class="token punctuation">;</span> </span>
<span class="line">vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> adj<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">  visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> u<span class="token operator">:</span> adj<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">dfs</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="${ssrRenderStyle({ "counter-reset": "line-number 0" })}"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="bfs" tabindex="-1"><a class="header-anchor" href="#bfs"><span>BFS</span></a></h3><p>La BFS, o breadth-first search, è invece un algoritmo che visita il grafo in ampiezza. A differenza della DFS è un algoritmo iterativo che sfrutta la queue. Il nodo corrente <code>v</code> si trova all&#39;inizio della queue e si aggiungono in fondo a questa tutti i nodi <code>u</code> collegati a <code>v</code> con un arco.</p><p>Anche in questo caso la complessità è <code>O(N+M)</code>.</p><p>L&#39;implementazione in C++ che usa la lista di adiacenza è:</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token comment">//variabili:</span></span>
<span class="line">vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> <span class="token function">adj</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">&gt;</span> <span class="token function">visited</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">distance</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> q<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//x è il nodo di partenza</span></span>
<span class="line"><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">int</span> u <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> v <span class="token operator">:</span> adj<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line">    visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">    distance<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> distance<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="${ssrRenderStyle({ "counter-reset": "line-number 0" })}"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dijkstra" tabindex="-1"><a class="header-anchor" href="#dijkstra"><span>Dijkstra</span></a></h3><p>Dijkstra è un algoritmo per calcolare la distanza (minima) di un nodo a tutti gli altri. Funziona solo con pesi non negativi. L&#39;idea è tenersi un vettore di distanze temporanee e processare ogni volta il nodo a distanza minore. Processare un nodo vuol dire aggiornare le distanze di tutti i vicini. Per capire qual&#39;è il nodo a distanza minore si usa una <code>priority_queue</code> in cui le distanze vengono messe negative per prendere la più piccola (la <code>priority_queue</code> ritorna l&#39;elemento maggiore).<br> La complessità è <code>O((N+M)logN)</code>.<br> Implementazione:</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token comment">//variabili:</span></span>
<span class="line">vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token function">adj</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">&gt;</span> <span class="token function">visited</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">distance</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> INT_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">priority_queue<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> pq<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">pq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> x<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//x è il nodo di partenza</span></span>
<span class="line">distance<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>pq<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">int</span> v <span class="token operator">=</span> pq<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span></span>
<span class="line">  pq<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span><span class="token punctuation">(</span>visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line">  visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> e<span class="token operator">:</span> adj<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> u <span class="token operator">=</span> e<span class="token punctuation">.</span>first<span class="token punctuation">;</span> <span class="token keyword">int</span> w <span class="token operator">=</span> e<span class="token punctuation">.</span>second<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span><span class="token punctuation">(</span>distance<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">&gt;</span>distance<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">      distance<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>distance<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">;</span></span>
<span class="line">      pq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token operator">-</span>distance<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> u<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="${ssrRenderStyle({ "counter-reset": "line-number 0" })}"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add(".vuepress/.temp/pages/materiale/grafi.html.vue");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const grafi_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender], ["__file", "grafi.html.vue"]]);
const data = JSON.parse('{"path":"/materiale/grafi.html","title":"Grafi","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Come memorizzare un grafo?","slug":"come-memorizzare-un-grafo","link":"#come-memorizzare-un-grafo","children":[{"level":3,"title":"Lista di archi","slug":"lista-di-archi","link":"#lista-di-archi","children":[]},{"level":3,"title":"Matrice di adiacenza","slug":"matrice-di-adiacenza","link":"#matrice-di-adiacenza","children":[]},{"level":3,"title":"Lista di adiacenza","slug":"lista-di-adiacenza","link":"#lista-di-adiacenza","children":[]}]},{"level":2,"title":"Algoritmi","slug":"algoritmi","link":"#algoritmi","children":[{"level":3,"title":"DFS","slug":"dfs","link":"#dfs","children":[]},{"level":3,"title":"BFS","slug":"bfs","link":"#bfs","children":[]},{"level":3,"title":"Dijkstra","slug":"dijkstra","link":"#dijkstra","children":[]}]}],"git":{"updatedTime":1736442639000,"contributors":[{"name":"Giovanni","username":"Giovanni","email":"112493877+ciao-gio@users.noreply.github.com","commits":1,"url":"https://github.com/Giovanni"},{"name":"nik-din","username":"nik-din","email":"nik.dindo@gmail.com","commits":1,"url":"https://github.com/nik-din"}]},"filePathRelative":"materiale/grafi.md"}');
export {
  grafi_html as comp,
  data
};
